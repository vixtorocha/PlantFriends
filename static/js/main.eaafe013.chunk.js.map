{"version":3,"sources":["imgs/pothos.jpg","imgs/zz-plant.jpg","imgs/peacelily.jpg","components/Card.js","components/CardList.js","plants.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","name","link","react_default","a","createElement","className","src","alt","CardList","plants","map","user","i","components_Card","key","id","require","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","filteredPlants","filter","plant","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaafe013.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pothos.ebcfa506.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zz-plant.ac885e5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/peacelily.6a7f2002.jpg\";","import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card({ name, link }) {\r\n    return (\r\n        <div className='tc bg-white dib br3 pa3 ma2 grow bw2 shadow-3'>\r\n            <img src={link} alt={name} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>Descrição</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ plants }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                plants.map((user, i) => {\r\n                    return (\r\n                        < Card\r\n                            key={i}\r\n                            id={plants[i].id}\r\n                            name={plants[i].name}\r\n                            link={plants[i].link}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","export const plants = [{\r\n        id: 1,\r\n        name: 'ZZ-Plant',\r\n        link: require('../src/imgs/zz-plant.jpg')\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Peace Lily',\r\n        link: require('../src/imgs/peacelily.jpg')\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Pothos',\r\n        link: require('../src/imgs/pothos.jpg')\r\n    }\r\n\r\n]","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='p2'>\r\n            <input\r\n                className='pa3 ba b--blue bg-white'\r\n                type='search'\r\n                placeholder='search plants'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { plants } from '../plants';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            plants: plants,\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        const filteredPlants = this.state.plants.filter(plant => {\r\n            return plant.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n\r\n        if (!plants.length) {\r\n            return <h1 className='washed-blue f1'>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc' >\r\n                    <h1 className='washed-blue f1'>Plantfriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList plants={filteredPlants} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}