{"version":3,"sources":["imgs/zz-plant.jpg","imgs/peacelily.jpg","imgs/pothos.jpg","components/Card.js","components/CardList.js","plants.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","name","link","react_default","a","createElement","className","src","alt","CardList","plants","map","user","i","components_Card","key","id","require","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","filteredPlants","filter","plant","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8JCgBzBC,MAbf,SAAAC,GAA8B,IAAdC,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,KAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,IAAKP,IACrBE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,+BCaDI,EAnBE,SAAAT,GAAgB,IAAbU,EAAaV,EAAbU,OAChB,OACIP,EAAAC,EAAAC,cAAA,WAEQK,EAAOC,IAAI,SAACC,EAAMC,GACd,OACIV,EAAAC,EAAAC,cAAES,EAAF,CACIC,IAAKF,EACLG,GAAIN,EAAOG,GAAGG,GACdf,KAAMS,EAAOG,GAAGZ,KAChBC,KAAMQ,EAAOG,GAAGX,WCb/BQ,EAAS,CAClB,CACIM,GAAI,EACJf,KAAM,WACNC,KAAMe,EAAQ,KAElB,CACID,GAAI,EACJf,KAAM,aACNC,KAAMe,EAAQ,KAElB,CACID,GAAI,EACJf,KAAM,SACNC,KAAMe,EAAQ,MCCPC,EAbG,SAAAlB,GAAmCA,EAAhCmB,YAAgC,IAAnBC,EAAmBpB,EAAnBoB,aAC9B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,0BACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCmCJC,cAjCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1CZ,EAAKa,MAAQ,CACTnC,OAAQA,EACRgC,YAAa,IAJPV,wEAYL,IAAAc,EAAAX,KACCY,EAAiBZ,KAAKU,MAAMnC,OAAOsC,OAAO,SAAAC,GAC5C,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASL,EAAKD,MAAMH,YAAYQ,iBAGpE,OAAKxC,EAAO0C,OAIJjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,gBACAH,EAAAC,EAAAC,cAACgD,EAAD,CAAWjC,aAAce,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACiD,EAAD,KACInD,EAAAC,EAAAC,cAACkD,EAAD,CAAU7C,OAAQqC,MAPvB5C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,kBAnBDkD,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OACL5D,EAAAC,EAAAC,cAAC2D,EAAD,MACEC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48e5b7d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zz-plant.ac885e5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/peacelily.6a7f2002.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pothos.ebcfa506.jpg\";","import React from 'react';\nimport './Card.css';\n\nfunction Card({ name, link }) {\n    return (\n        <div className='tc bg-white dib br3 pa3 ma2 grow bw2 shadow-3'>\n            <img src={link} alt={name} />\n            <div>\n                <h2>{name}</h2>\n                <p>Descrição</p>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ plants }) => {\n    return (\n        <div>\n            {\n                plants.map((user, i) => {\n                    return (\n                        < Card\n                            key={i}\n                            id={plants[i].id}\n                            name={plants[i].name}\n                            link={plants[i].link}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","export const plants = [\n    {\n        id: 1,\n        name: 'ZZ-Plant',\n        link: require('../src/imgs/zz-plant.jpg')\n    },\n    {\n        id: 2,\n        name: 'Peace Lily',\n        link: require('../src/imgs/peacelily.jpg')\n    },\n    {\n        id: 3,\n        name: 'Pothos',\n        link: require('../src/imgs/pothos.jpg')\n    }\n]","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='p2'>\n            <input\n                className='pa3 ba b--blue bg-white'\n                type='search'\n                placeholder='search plants'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport { plants } from '../plants';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            plants: plants,\n            searchField: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchField: event.target.value })\n    }\n\n    render() {\n        const filteredPlants = this.state.plants.filter(plant => {\n            return plant.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        });\n\n        if (!plants.length) {\n            return <h1 className='washed-blue f1'>Loading</h1>\n        } else {\n            return (\n                <div className='tc' >\n                    <h1 className='washed-blue f1'>Plantfriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <CardList plants={filteredPlants} />\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}